#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Build a Python virtual environment without setuptools, virtualenv and
other dependencies. Useful when building on "fresh" systems or those
which for some reason do not have the required dependencies available

Support Python 2.6, Python 2.7, and Python 3
See Makefile ...

Copyright (C) 2018
    Adam Greene <copyright@mzpqnxow.com>
    David Marker <dave@freedave.net>
Please see LICENSE or LICENSE.md for terms
"""
from __future__ import print_function
from __future__ import unicode_literals
import subprocess
import multiprocessing
from os import mkdir, getuid, getcwd, environ, chdir, symlink, remove, unlink
from os.path import dirname, realpath, join as join_path, abspath
from datetime import datetime
import pwd
import shutil
import subprocess as sp
from contextlib import contextmanager
from errno import EEXIST, ENOENT, ENOTEMPTY
from time import sleep
from os.path import (
    isdir,
    exists,
    sep as DIRSEP)

CURDIR = cwd = dirname(abspath(__file__))
# Basic required directories for a virtualenv
VENV_DIRS = set(['lib', 'bin', 'include'])
# Taken from etc/
INI_FILES = set(['.interactive', 'pip.conf'])
# Put your dependencies in these files in your empty venv directory
PKG_REQUIREMENT_FILEPATHS = set(['requirements.txt',
                                 'etc/requirements.txt'])

# By default, use the 'system python'
DEFAULT_VENV_BASE_PYTHON2 = '/usr/bin/python2'
DEFAULT_VENV_BASE_PYTHON3 = '/usr/bin/python3'
DEFAULT_VENV_BASE_PYTHON = DEFAULT_VENV_BASE_PYTHON2
PYVERSION = 2
CPU_COUNT = multiprocessing.cpu_count()


def basic_env(cwd):
    """ Provide a clean environment with bare essentials """
    global PYVERSION
    pent = pwd.getpwuid(getuid())
    env = dict()
    env['PYTHONPATH'] = '{}/packages/lib/python{}/site-packages/'.format(cwd, PYVERSION)
    env['HOME'] = pent.pw_dir
    env['SHELL'] = pent.pw_shell
    env['LOGNAME'] = pent.pw_name
    env['PWD'] = getcwd()
    # One can hope that these environment variables make it to a compiled native code build that
    # uses GNU make. Pretty unlikely to work, and even less likely to occur, but doesn't hurt.
    # Maybe numpy or pandas or cython or some such thing can benefit?
    parallelism_count = '{}'.format((CPU_COUNT)) if CPU_COUNT == 1 else '{}'.format(CPU_COUNT - 1)
    # Hope it counts, especially for big packages
    env['MAKEFLAGS'] = '-j{}'.format(parallelism_count)
    env['CONCURRENCY_LEVEL'] = parallelism_count
    for key in ('PATH', 'TERM', 'MAIL'):
        if key in environ:
            env[key] = environ[key]
    return env


@contextmanager
def pushd(directory):
    """ Emulate Bash pushd/popd """
    cwd = getcwd()
    try:
        chdir(directory)
    except OSError as err:
        if err.errno == ENOENT:
            raise RuntimeError('%s does not exist !!' % directory)
        else:
            raise err
    yield
    chdir(cwd)


def force_symlink(file1, file2):
    """ Be forceful about creating a symlink """
    try:
        symlink(file1, file2)
    except OSError, err:
        if err.errno == EEXIST:
            remove(file2)
            symlink(file1, file2)


def destroy(explain, vdirs, cfg):
    """ Destroy a previously created virtual environment """
    print('%s: destroying %s' % (explain, ('/ '.join(vdirs) + '/')))
    # rmtree can fail if there are stale .nfs files
    # so put it in a loop
    retry = 10  # don't try forever
    done = False
    while retry > 0 and not done:
        retry, done = (retry - 1, True)
        for directory in vdirs:
            try:
                shutil.rmtree(directory)
            except OSError as err:
                if err.errno == ENOENT:
                    pass  # directory already gone
                elif err.errno == ENOTEMPTY:
                    done = False  # try again if retry isn't exhausted.
                else:
                    raise err  # re-raise something is wrong.
        if not done:
            # SSHFS/NFS/CIFS/SMB or some other filesystem locking issue
            sleep(2)

    print('%s: destroying %s' % (explain, (' '.join(cfg))))
    for cfgfile in cfg:
        try:
            unlink(cfgfile)
        except (IOError, OSError):
            pass


def invoke_virtualenv(virtualenv_exe, python, pipini, interactive, cwd):
    """ Run virtualenv with the arguments and environment set """
    shutil.copy(pipini, 'pip.conf')
    shutil.copy(interactive, '.interactive')

    try:
        sp.check_call(
            [python, virtualenv_exe, '--no-site-packages', '.'],
            env=basic_env(cwd))
    except OSError as err:
        if err.errno == ENOENT:
            raise RuntimeError('Python %s does not exist !!' % python)
        else:
            raise err


def freeze(*args, **kwargs):
    pip(*args, **kwargs)


def install(*args, **kwargs):
    pip(*args, **kwargs)


def mkdir_p(dirname):
    """emulate mkdir -p behavior"""
    path_stack = ''
    for element in dirname.split(DIRSEP):
        if not isdir(dirname):
            if not element:
                continue
            path_stack = join_path(DIRSEP, path_stack, element)
            if not isdir(path_stack):
                mkdir(path_stack)


def pip(pip_exe, ini, require, cwd, action='install'):
    """
        Set 'PIP_CONFIG_FILE' environment variable to ini, then call
        exe as pip using the require file.
    """
    environ['PIP_CONFIG_FILE'] = ini

    req = None
    for req in require:
        if exists(req):
            break
    else:
        print('WARNING: none of %s exist, skipping pip' % (str(require)))
        return
    try:
        mkdir_p(join_path(CURDIR, 'logs'))  # Root of repo
    except OSError as err:
        if err.errno == EEXIST:
            pass
        else:
            print (err)
            raise

    pip_arguments = {
        'install': [  # Perform an install
            pip_exe,
            'install',
            '--compile',
            '--progress-bar',
            'off',
            '--pre',
            '-I',
            '-r',
            req],
        'freeze': [  # Freeze versions in a built venv
            pip_exe,
            'freeze',
            '--no-cache-dir',
            '-l',
            '-r',
            req]  # Preserves comments and order
    }
    assert action in (pip_arguments)

    if action == 'install':
        # Use -I to ensure prepackaged dependencies are installed if specified in
        # requirements.txt. Otherwise they are detected in the packages directory
        # and not installed at all, requiring manually adding with pip after the
        # venv is built
        try:
            sp.check_call(pip_arguments[action], env=basic_env(cwd))
        except Exception as err:
            print('error invoking pip install {}'.format(err))
            raise
    elif action == 'freeze':
        try:
            byte_output = sp.check_output(pip_arguments[action], env=basic_env(cwd))
            frozen_fullpath = frozen_requirements_fullpath(req)
            with open(frozen_fullpath, 'wb') as ffd:
                ffd.write(byte_output)
                print('Writing stable, frozen requirements file to {}...'.format(frozen_fullpath))
                utf8_output = byte_output.decode('utf-8').strip()
                print('# ---- END ---- #')
        except subprocess.CalledProcessError as err:
            print('error invoking pip freeze {}'.format(err))
            raise


def frozen_requirements_fullpath(req):
    base_requirements_path = (join_path(dirname(realpath(req))))
    mkdir_p(base_requirements_path)
    today_yyyymmdd = datetime.today().strftime('%Y-%m-%d.%s')
    frozen_filename = 'codefreeze-requirements.txt.frozen-deplay-{}'.format(today_yyyymmdd)
    frozen_fullpath = '{}/{}'.format(
        base_requirements_path, frozen_filename)
    return frozen_fullpath


def main():
    """Let it begin"""
    # For 2.[67] compatibility
    from optparse import OptionParser
    global DEFAULT_VENV_BASE_PYTHON, PYVERSION
    optparser = OptionParser('usage: %prog [options] <destination>')

    optparser.add_option('-p',
                         '--python',
                         action='store',
                         type='string',
                         dest='python',
                         default=DEFAULT_VENV_BASE_PYTHON,
                         help='specify the full path to python')
    optparser.add_option('--freeze',
                         action='store_true',
                         dest='freeze',
                         default=False,
                         help='Freeze versions in a venv for future stability (saves requirements.txt first)')
    optparser.add_option('-d', '--destroy',
                         action='store_true',
                         dest='destroy',
                         default=False,
                         help='Destroy a venv')
    optparser.add_option('-i',
                         '--ini',
                         action='store',
                         dest='inifile',
                         default='pip.ini',
                         help='The pip.ini file to use from the etc/ directory')
    optparser.add_option('-3',
                         '--python3',
                         action='store_true',
                         dest='use_python3',
                         default=False,
                         help='Build a Python 3 virtual environment instead of Python 2')

    (args, venv_dest) = optparser.parse_args()

    if len(venv_dest) != 1:
        optparser.error('must specify destination')

    if args.use_python3:
        DEFAULT_VENV_BASE_PYTHON = DEFAULT_VENV_BASE_PYTHON3
        PYVERSION = 3
    else:
        DEFAULT_VENV_BASE_PYTHON = DEFAULT_VENV_BASE_PYTHON2
        PYVERSION = 2

    for appname in ('virtualenv', 'easy_install', 'pip'):
        force_symlink(
            '{0}{1}'.format(appname, PYVERSION),
            join_path('packages', 'bin', '{0}'.format(appname)))

    cwd = dirname(abspath(__file__))

    ini_load_path = join_path(cwd, 'etc/%s' % args.inifile)
    virtualenv_run_path = join_path(cwd, 'packages/bin/virtualenv')
    interactive_load_path = join_path(cwd, 'etc/interactive')

    try:
        with pushd(venv_dest[0]):
            if args.destroy:
                destroy('requested destroy and recreate', VENV_DIRS, INI_FILES)
                invoke_virtualenv(virtualenv_run_path,
                                  args.python,
                                  ini_load_path,
                                  interactive_load_path,
                                  cwd)
            if args.freeze:
                pip('bin/pip', ini_load_path, PKG_REQUIREMENT_FILEPATHS, cwd, action='freeze')

            files_exist = [exists(entry) for entry in VENV_DIRS | INI_FILES]
            if not all(files_exist):
                # at least one virtualenv dir missing
                if any(files_exist):
                    destroy('incomplete virtualenv detected', VENV_DIRS, INI_FILES)
                else:
                    print('no virtual env detected')
                invoke_virtualenv(virtualenv_run_path,
                                  args.python,
                                  ini_load_path,
                                  interactive_load_path,
                                  cwd)

            # always try to install the requirements.
            pip('bin/pip', ini_load_path, PKG_REQUIREMENT_FILEPATHS, cwd, action='install')

    except RuntimeError as err:
        optparser.error(
            '%s Destination virtualenv directory and Python intrpreter must both exist !!' % (
                str(err)))


if __name__ == '__main__':
    main()
